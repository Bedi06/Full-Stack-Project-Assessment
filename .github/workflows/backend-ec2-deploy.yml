name: Push-to-EC2

on:
  push:
    branches:
      - docker-backend
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create tag for image
        id: create_tag
        run: |
          TAG=latest
          echo ::set-output name=tag::$TAG

      - name: Build Docker image
        run: |
          pwd 
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/my-vr-docker:${{ steps.create_tag.outputs.tag }} 
          cd ..

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{secrets.DOCKER_USERNAME}}/my-vr-docker:${{ steps.create_tag.outputs.tag }}

      - name: Clear images and pull new image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY  }}
          script: |
            docker system prune -a -f
            docker pull ${{secrets.DOCKER_USERNAME}}/my-vr-docker:${{ steps.create_tag.outputs.tag }}

      - name: Identify and stop previous container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS}}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            CONTAINER_ID=$(docker ps -q --filter "ancestor=${{secrets.DOCKER_USERNAME}}/my-vr-docker:${{ steps.create_tag.outputs.tag }}")
            if [ ! -z "$CONTAINER_ID" ]; then
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            fi

      - name: Run container on VM server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS}}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker run -d \
              -e DB_USER=${{ secrets.RDS_USER }} \
              -e DB_HOST=${{ secrets.RDS_HOST }} \
              -e DB_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              -e DB_NAME=${{ secrets.RDS_NAME }} \
              -e DB_PORT=${{ secrets.RDS_PORT }} \
              -p 4000:3000 \
              ${{secrets.DOCKER_USERNAME}}/my-vr-docker:${{ steps.create_tag.outputs.tag }}
